#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "ch.h"
#include "hal.h"
#include "memory_protection.h"
#include <main.h>
#include "leds.h"
#include "spi_comm.h"
#include "motors.h"
#include "sensors/proximity.h"
#include "selector.h"
#include "sensors/VL53L0X/VL53L0X.h"

#define delay 50
#define obj_max 30
#define dist_max 400
#define dist_min 20

messagebus_t bus;
MUTEX_DECL(bus_lock);
CONDVAR_DECL(bus_condvar);

int prox_cal[8]={0,0,0,0,0,0,0,0};
int i, j;
int prox_max;
int prox_loc;			//Prox sensor with the max value i.e the sensor to which the obj is closest
int dist;
int flag = 0;
int count = 0;

int main(void)
{	
	halInit();
    chSysInit();
    mpu_init();
	
	messagebus_init(&bus, &bus_lock, &bus_condvar);

	motors_init();

    proximity_start();

calibrate_ir();

VL53L0X_start();

    clear_leds();
spi_comm_start();

while(1)
{
	chThdSleepMilliseconds(delay);
	prox_max = 0;

	for(i = 0;i<8;++i)
{
			prox_cal[i] = get_calibrated_prox(i); 
			if (prox_cal[i] > prox_max)
			{
	prox_max = prox_cal[i];
prox_loc = i; 
}
}

dist = VL53L0X_get_dist_mm();


if((prox_max>obj_max)&&(dist>100))
{
	count=0;
	if(prox_loc<=3)
	{
		clear_leds();
		set_led(LED3,2);
		left_motor_set_speed(300);
		right_motor_set_speed(-300);
}
else
{
		clear_leds();
		set_led(LED7,2);
		left_motor_set_speed(-300);
		right_motor_set_speed(300);
}
}


else if((dist>40)&&(dist<dist_max))
{
			count=0;
        		clear_leds();
        		set_rgb_led(LED2,10,0,0);
        		set_rgb_led(LED8,10,0,0);
        		left_motor_set_speed(500);
       right_motor_set_speed(500);
}

else if((prox_max<obj_max)&&(count<1))
{
			for(j=0;((j<300)&&(flag==0));j++)
        		{
        			clear_leds();
        			set_rgb_led(LED2,0,0,10);
        			set_rgb_led(LED4,0,0,10);
        			set_rgb_led(LED6,0,0,10);
        			set_rgb_led(LED8,0,0,10);

        			left_motor_set_speed(250);
        			right_motor_set_speed(-250);

        			dist = VL53L0X_get_dist_mm();
        			chThdSleepMilliseconds(delay);

        			if((dist>dist_min)&&(dist<dist_max))
        			{	
flag=1;	
}
        		}

			if(flag == 0)
{
count = count+1;
}
        		else
			{
        			while((dist>dist_min)&&(dist<dist_max))
        			{
        				clear_leds();
        				set_rgb_led(LED2,0,10,0);
        				set_rgb_led(LED4,0,10,0);
        				set_rgb_led(LED6,0,10,0);
        				set_rgb_led(LED8,0,10,0);

        				left_motor_set_speed(500);
        				right_motor_set_speed(500);

        				dist = VL53L0X_get_dist_mm();
        				chThdSleepMilliseconds(delay); 
        			}
        		}
}

else
{
			clear_leds();
        		left_motor_set_speed(0);
        		right_motor_set_speed(0);
}
}
}

#define STACK_CHK_GUARD 0xe2dee396
uintptr_t __stack_chk_guard = STACK_CHK_GUARD;

void __stack_chk_fail(void)
{
    chSysHalt("Stack smashing detected");
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "ch.h"
#include "hal.h"
#include "memory_protection.h"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "ch.h"
#include "hal.h"
#include "memory_protection.h"
#include <main.h>
#include "leds.h"
#include "spi_comm.h"
#include "motors.h"
#include "sensors/proximity.h"
#include "selector.h"
#include "sensors/VL53L0X/VL53L0X.h"

#define delay 50
#define obj_max 30
#define dist_max 600
#define dist_min 10

messagebus_t bus;
MUTEX_DECL(bus_lock);
CONDVAR_DECL(bus_condvar);

int prox_cal[8]={0,0,0,0,0,0,0,0};
int i, j;
int prox_max;
int prox_loc;			//Prox sensor with the max value i.e the sensor to which the obj is closest
int dist;
int flag = 0;
int count = 0;

int main(void)
{
	halInit();
    chSysInit();
    mpu_init();

	messagebus_init(&bus, &bus_lock, &bus_condvar);

	motors_init();

    proximity_start(0);

calibrate_ir();

VL53L0X_start();

      clear_leds();
spi_comm_start();

while(1)
{
	chThdSleepMilliseconds(delay);
	prox_max = 0;

	for(i = 0;i<8;++i)
{
			prox_cal[i] = get_calibrated_prox(i);
			if (prox_cal[i] > prox_max)
			{
	prox_max = prox_cal[i];
prox_loc = i;
}
}

dist = VL53L0X_get_dist_mm();


if((prox_max>obj_max)&&(dist>100))
{
	count=0;
	if(prox_loc<=3)
	{
		clear_leds();
		set_led(LED3,2);
		left_motor_set_speed(300);
		right_motor_set_speed(-300);
}
else
{
		clear_leds();
		set_led(LED7,2);
		left_motor_set_speed(-300);
		right_motor_set_speed(300);
}
}


else if((dist>40)&&(dist<dist_max))
{
			count=0;
        		clear_leds();
        		set_rgb_led(LED2,10,0,0);
        		set_rgb_led(LED8,10,0,0);
        		left_motor_set_speed(500);
       right_motor_set_speed(500);
}

else if((prox_max<obj_max)&&(count<1))
{
			for(j=0;((j<300)&&(flag==0));j++)
        		{
        			clear_leds();
        			set_rgb_led(LED2,0,0,10);
        			set_rgb_led(LED4,0,0,10);
        			set_rgb_led(LED6,0,0,10);
        			set_rgb_led(LED8,0,0,10);

        			left_motor_set_speed(250);
        			right_motor_set_speed(-250);

        			dist = VL53L0X_get_dist_mm();
        			chThdSleepMilliseconds(delay);

        			if((dist>dist_min)&&(dist<dist_max))
        			{
flag=1;
}
        		}

			if(flag == 0)
{
count = count+1;
}
        		else
			{
        			while((dist>dist_min)&&(dist<dist_max))
        			{
        				clear_leds();
        				set_rgb_led(LED2,0,10,0);
        				set_rgb_led(LED4,0,10,0);
        				set_rgb_led(LED6,0,10,0);
        				set_rgb_led(LED8,0,10,0);

        				left_motor_set_speed(500);
        				right_motor_set_speed(500);

        				dist = VL53L0X_get_dist_mm();
        				chThdSleepMilliseconds(delay);
        			}
        		}
}

else
{
			clear_leds();
        		left_motor_set_speed(0);
        		right_motor_set_speed(0);
}
}
}

#define STACK_CHK_GUARD 0xe2dee396
uintptr_t __stack_chk_guard = STACK_CHK_GUARD;

void __stack_chk_fail(void)
{
    chSysHalt("Stack smashing detected");
}

#include <main.h>
#include "leds.h"
#include "spi_comm.h"
#include "motors.h"
#include "sensors/proximity.h"
#include "selector.h"
#include "sensors/VL53L0X/VL53L0X.h"

#define delay 50
#define obj_max 30
#define dist_max 600
#define dist_min 10

messagebus_t bus;
MUTEX_DECL(bus_lock);
CONDVAR_DECL(bus_condvar);

int prox_cal[8]={0,0,0,0,0,0,0,0};
int i, j;
int prox_max;
int prox_loc;			//Prox sensor with the max value i.e the sensor to which the obj is closest
int dist;
int flag = 0;
int count = 0;

int main(void)
{
	halInit();
    chSysInit();
    mpu_init();

	messagebus_init(&bus, &bus_lock, &bus_condvar);

	motors_init();

    proximity_start(0);

calibrate_ir();

VL53L0X_start();

      clear_leds();
spi_comm_start();

while(1)
{
	chThdSleepMilliseconds(delay);
	prox_max = 0;

	for(i = 0;i<8;++i)
{
			prox_cal[i] = get_calibrated_prox(i);
			if (prox_cal[i] > prox_max)
			{
	prox_max = prox_cal[i];
prox_loc = i;
}
}

dist = VL53L0X_get_dist_mm();


if((prox_max>obj_max)&&(dist>100))
{
	count=0;
	if(prox_loc<=3)
	{
		clear_leds();
		set_led(LED3,2);
		left_motor_set_speed(300);
		right_motor_set_speed(-300);
}
else
{
		clear_leds();
		set_led(LED7,2);
		left_motor_set_speed(-300);
		right_motor_set_speed(300);
}
}


else if((dist>40)&&(dist<dist_max))
{
			count=0;
        		clear_leds();
        		set_rgb_led(LED2,10,0,0);
        		set_rgb_led(LED8,10,0,0);
        		left_motor_set_speed(500);
       right_motor_set_speed(500);
}

else if((prox_max<obj_max)&&(count<1))
{
			for(j=0;((j<300)&&(flag==0));j++)
        		{
        			clear_leds();
        			set_rgb_led(LED2,0,0,10);
        			set_rgb_led(LED4,0,0,10);
        			set_rgb_led(LED6,0,0,10);
        			set_rgb_led(LED8,0,0,10);

        			left_motor_set_speed(250);
        			right_motor_set_speed(-250);

        			dist = VL53L0X_get_dist_mm();
        			chThdSleepMilliseconds(delay);

        			if((dist>dist_min)&&(dist<dist_max))
        			{
flag=1;
}
        		}

			if(flag == 0)
{
count = count+1;
}
        		else
			{
        			while((dist>dist_min)&&(dist<dist_max))
        			{
        				clear_leds();
        				set_rgb_led(LED2,0,10,0);
        				set_rgb_led(LED4,0,10,0);
        				set_rgb_led(LED6,0,10,0);
        				set_rgb_led(LED8,0,10,0);

        				left_motor_set_speed(500);
        				right_motor_set_speed(500);

        				dist = VL53L0X_get_dist_mm();
        				chThdSleepMilliseconds(delay);
        			}
        		}
}

else
{
			clear_leds();
        		left_motor_set_speed(0);
        		right_motor_set_speed(0);
}
}
}

#define STACK_CHK_GUARD 0xe2dee396
uintptr_t __stack_chk_guard = STACK_CHK_GUARD;

void __stack_chk_fail(void)
{
    chSysHalt("Stack smashing detected");
}
